pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: python
    image: "python:3.11"
    command:
    - cat
    tty: true
"""
    }
  }

  environment {
    REPO_URL = 'https://github.com/gabrielSpassos/deployment-poc.git'
    APP_NAME = 'person-app'
    DOCKER_REGISTRY_FOR_KANIKO = 'docker-registry.deployment-poc-infra-namespace.svc.cluster.local:5000'
    DOCKER_REGISTRY_FOR_HELM = 'localhost:30004'
    NAMESPACE = 'deployment-poc-application-namespace'
    HELM_CHART_PATH = './helm-person-app'
    VERSION = "${env.BUILD_NUMBER}"
  }

  stages {
    stage('Clone Repository') {
      steps {
        container('python') {
          git url: "${REPO_URL}", branch: 'main'
        } 
      }
    }

    stage('Check Python') {
      steps {
        container('python') {  
          sh 'python --version'
          sh 'pip --version'
        }
      }
    }

    stage('Install Dependencies') {
      steps {
        container('python') {  
          dir('app') {
            sh 'echo "Installing dependencies..."'
            sh 'pip install -r requirements.txt'
          }
        }
      } 
    }

    stage('Run Tests') {
      steps {
        container('python') {  
          dir('app') {
            sh 'echo "Running tests..."'
            sh 'pytest test'
          }
        }
      }

      post {
        success {
            echo 'All tests passed ✅'
        }
        failure {
            echo 'Tests failed ❌'
        }
      }
    }

    stage('Build and Push with Kaniko') {
      agent {
          kubernetes {
              yaml """
              apiVersion: v1
              kind: Pod
              spec:
                containers:
                - name: kaniko
                  image: gcr.io/kaniko-project/executor:debug
                  imagePullPolicy: Always
                  command:
                  - sleep
                  args:
                  - infinity
              """
              defaultContainer 'kaniko'
          }
      }
      steps {
          dir('app') {
              sh """
              /kaniko/executor --context=\$(pwd) \
                                --destination=${DOCKER_REGISTRY_FOR_KANIKO}/${APP_NAME}:${VERSION} \
                                --insecure \
                                --skip-tls-verify
              """
          }
      }
    }

    stage('Deploy') {
        agent {
            kubernetes {
                yaml """
                apiVersion: v1
                kind: Pod
                spec:
                  containers:
                  - name: helm-kubectl
                    image: dtzar/helm-kubectl:latest
                    command:
                    - sleep
                    args:
                    - infinity
                    resources:
                    requests:
                      cpu: "500m"
                      memory: "512Mi"
                    limits:
                      cpu: "1"
                      memory: "1Gi"
                """
                defaultContainer 'helm-kubectl'
            }
        }
        steps {
            dir('app') {
                sh """
                sed -i 's|tag: .*|tag: ${VERSION}|g' ${HELM_CHART_PATH}/values.yaml
                sed -i 's|repository: .*|repository: ${DOCKER_REGISTRY_FOR_HELM}/${APP_NAME}|g' ${HELM_CHART_PATH}/values.yaml
                """

                echo "Deploying with Helm..."
                sh "helm upgrade --install ${APP_NAME} ${HELM_CHART_PATH} --namespace ${NAMESPACE}"

                echo "Verifying deployment..."
                sh "kubectl rollout status deployment/${APP_NAME} -n ${NAMESPACE}"
                sh "kubectl get pods -l app=${APP_NAME} -n ${NAMESPACE}"
            }
        }
    }
  }

  post {
    always {
      echo 'Job finished.'
    }
    success {
      echo 'Pipeline Passed ✅'
    }
    failure {
      echo 'Pipeline Failed ❌'
    }
  }
}
